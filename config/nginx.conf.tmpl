# Based-on: https://github.com/aiogram/telegram-bot-api/blob/master/example/nginx/default.conf
user root; # Remove this on Heroku
daemon off;

worker_processes 8;
worker_rlimit_nofile 65535;

events {
    use epoll;
    accept_mutex on;
    multi_accept on;
    worker_connections 65535;
}

http {
    charset utf-8;
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    server_tokens off;
    chunked_transfer_encoding on;
    client_body_buffer_size 30M;
    client_max_body_size 2G;
    keepalive_timeout 0s;
    send_timeout 600s;

    # MIME Types
    include mime.types;
    default_type application/octet-stream;

    # Use $sanitized_request instead of $request to hide Telegram token
    log_format cloudflare
        '$remote_addr - $remote_user [$time_local] '
        '"$sanitized_request" $status $body_bytes_sent "$http_referer" '
        '"$http_user_agent" $http_cf_ray $http_cf_connecting_ip '
        '$http_x_forwarded_for $http_x_forwarded_proto $http_true_client_ip '
        '$http_cf_ipcountry $http_cf_visitor $http_cdn_loop';

    # Setup WebSocket
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    upstream socket {
        ip_hash;
        server unix:/tmp/tg-server.sock;
    }

    # DNS over HTTPS
    resolver
        1.1.1.1 1.0.0.1 [2606:4700:4700::1111] [2606:4700:4700::1001] # Cloudflare DNS resolver
        8.8.8.8 8.8.4.4 [2001:4860:4860::8888] [2001:4860:4860::8844] # Google DNS resolver
        208.67.222.222 208.67.220.220 [2620:119:35::35] [2620:119:53::53] # OpenDNS resolver
        9.9.9.9 149.112.112.112 [2620:fe::fe] [2620:fe::9] # Quad9 DNS resolver
        valid=60s;
    resolver_timeout 2s;

    server {
        server_name _;
        listen %(PORT)% reuseport;
        listen [::]:%(PORT)% reuseport;

        # Comment out the following lines if your domain is not https
        if ($http_x_forwarded_proto = "http") {
            return 301 https://$http_host$request_uri;
        }

        set $sanitized_request $request;
        if ( $sanitized_request ~ (\w+)\s(\/bot\d+):[-\w]+\/(\S+)\s(.*) ) {
            set $sanitized_request "$1 $2:<hidden-token>/$3 $4";
        }

        access_log /var/log/nginx/access.log cloudflare buffer=512k flush=1m;

        # <host>/file/bot<token>/documents/file_0
        location ~* \/file\/bot\d+:(.*) {
            rewrite ^/file\/bot(.*) /$1 break;
            try_files $uri @files;
        }

        # <host>/file/<token>/documents/file_0
        location ~* \/file\/\d+:(.*) {
            rewrite ^/file\/(.*) /$1 break;
            try_files $uri @files;
        }

        location / {
            try_files $uri @api;
        }

        location @files {
            root /file;
            gzip on;
            gzip_vary on;
            gzip_static on;
            gzip_proxied any;
            gzip_comp_level 9;
            gzip_buffers 64 8k;
            gzip_http_version 1.1;
            gzip_min_length 1100;
            gzip_disable "MSIE [1-6]\.";
            add_header 'Content-Disposition' 'attachment';
        }

        location @api {
            uwsgi_pass socket;
            include uwsgi_params;

            uwsgi_buffering on;

            uwsgi_ssl_protocols TLSv1.2;
            uwsgi_ssl_server_name on;

            uwsgi_param Host $host;
            uwsgi_param X-Real-IP $remote_addr;
            uwsgi_param Upgrade $http_upgrade;
            uwsgi_param Connection $connection_upgrade;
            uwsgi_param X-Forwarded-Host $http_host;
            uwsgi_param X-Forwarded-For $proxy_add_x_forwarded_for;
            uwsgi_param X-Forwarded-Proto $http_x_forwarded_proto;

            uwsgi_connect_timeout 600s;
            uwsgi_send_timeout 600s;
            uwsgi_read_timeout 600s;
        }

        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }

        # Docker compose healthcheck
        location = /healthcheck {
            add_header 'Content-Type' 'application/json';
            return 200 '{"ok":true,"code":200,"description":"OK"}';
        }
    }
}
